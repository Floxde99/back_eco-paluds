// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Company {
  id_company        Int      @id @default(autoincrement())
  name              String
  siret             String   @unique
  sector            String
  address           String
  latitude          Float
  longitude         Float
  phone             String
  email             String
  website           String?
  description       String?
  validation_status String
  creation_date     DateTime @default(now())
  last_update       DateTime @updatedAt
  owner_id          Int?
  owner             User?    @relation(fields: [owner_id], references: [id_user])
  companyTypes      CompanyType[]
  inputs            Input[]
  outputs           Output[]
}


model CompanyType {
  company_id Int
  type_id    Int
  company    Company @relation(fields: [company_id], references: [id_company])
  type       Type    @relation(fields: [type_id], references: [id_type])
  @@id([company_id, type_id])
}


model Family {
  id_family Int    @id @default(autoincrement())
  name      String
  inputs    Input[]
  outputs   Output[]
}


model Flow {
  input_id  Int
  output_id Int
  input     Input  @relation(fields: [input_id], references: [id_input])
  output    Output @relation(fields: [output_id], references: [id_output])
  @@id([input_id, output_id])
}


model Input {
  id_input      Int      @id @default(autoincrement())
  resource_id   String?
  name          String
  category      String
  unit_measure  String
  description   String?
  status        String
  creation_date DateTime @default(now())
  last_update   DateTime @updatedAt
  company_id    Int
  company       Company  @relation(fields: [company_id], references: [id_company])
  family_id     Int?
  family        Family?  @relation(fields: [family_id], references: [id_family])
  flows         Flow[]
}


model Output {
  id_output     Int      @id @default(autoincrement())
  resource_id   String?
  name          String
  category      String
  is_been       Boolean
  unit_measure  String
  description   String?
  status        String
  creation_date DateTime @default(now())
  last_update   DateTime @updatedAt
  company_id    Int
  company       Company  @relation(fields: [company_id], references: [id_company])
  family_id     Int?
  family        Family?  @relation(fields: [family_id], references: [id_family])
  flows         Flow[]
}


model Partner {
  partner_id    Int         @id @default(autoincrement())
  name          String
  service_type  String
  coverage_area String
  capacity      Int
  rate          Float
  contact       String
  status        String
  transports    Transport[]
}


model Role {
  id_role Int    @id @default(autoincrement())
  name    String
  users   User[]
}


model Subscription {
  id_subscription       Int      @id @default(autoincrement())
  stripe_id             String   @unique
  stripe_customer_id    String?
  subscription_type     String
  plan_id               String?
  billing_cycle         String?
  start_date            DateTime
  end_date              DateTime?
  current_period_start  DateTime?
  current_period_end    DateTime?
  cancel_at_period_end  Boolean  @default(false)
  price                 Float
  currency              String   @default("eur")
  status                String
  ai_consumption        Int      @default(0)
  billing_threshold     Float
  payment_method        String?
  metadata              Json?
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id_user])
}


model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id_user])
  userId     Int
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Transport {
  transport_id     Int      @id @default(autoincrement())
  collection_date  DateTime
  status           String
  cost             Float
  distance         Float
  comments         String?
  partner_id       Int
  partner          Partner  @relation(fields: [partner_id], references: [partner_id])
}


model Type {
  id_type   Int    @id @default(autoincrement())
  name      String
  companyTypes CompanyType[]
}


model User {
  id_user         Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String    @unique
  password        String
  phone           String?
  avatar_url      String?   // ‚Üê AJOUTER UNIQUEMENT CETTE LIGNE
  stripe_customer_id String?
  confirmEmail    Boolean   @default(false)
  roleId          Int?
  roleObj         Role?   @relation(fields: [roleId], references: [id_role])
  creation_date   DateTime  @default(now())
  last_connection DateTime?
  companies       Company[]
  subscriptions   Subscription[]
  tokens          RefreshToken[]
}
