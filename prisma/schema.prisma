// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model AssistantConversation {
  id_assistant_conversation Int                    @id @default(autoincrement())
  user_id                   Int
  title                     String?                @db.VarChar(255)
  status                    String                 @default("OPEN") @db.VarChar(30)
  last_event_at             DateTime               @default(now())
  metadata                  Json?
  created_at                DateTime               @default(now())
  updated_at                DateTime               @updatedAt

  user                      User                   @relation(fields: [user_id], references: [id_user])
  messages                  AssistantMessage[]
  escalations               AssistantEscalation[]
  telemetry                 AssistantTelemetry[]

  @@index([user_id, last_event_at])
  @@map("assistant_conversations")
}


model AssistantEscalation {
  id_assistant_escalation Int                   @id @default(autoincrement())
  conversation_id         Int
  user_id                 Int
  status                  String               @default("PENDING") @db.VarChar(30)
  subject                 String               @db.VarChar(255)
  description             String?              @db.Text
  transcript              Json?
  ticket_reference        String?              @db.VarChar(255)
  metadata                Json?
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt

  conversation            AssistantConversation @relation(fields: [conversation_id], references: [id_assistant_conversation])
  user                    User                 @relation(fields: [user_id], references: [id_user])

  @@index([conversation_id, created_at])
  @@map("assistant_escalations")
}


model AssistantMessage {
  id_assistant_message Int                    @id @default(autoincrement())
  conversation_id      Int
  user_id              Int?
  role                 String                 @db.VarChar(30)
  status               String                 @default("QUEUED") @db.VarChar(30)
  text                 String?                @db.Text
  content              Json?
  tokens_in            Int?                   @default(0)
  tokens_out           Int?                   @default(0)
  error                String?                @db.Text
  metadata             Json?
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt

  conversation         AssistantConversation  @relation(fields: [conversation_id], references: [id_assistant_conversation])
  user                 User?                  @relation(fields: [user_id], references: [id_user])
  telemetry            AssistantTelemetry[]

  @@index([conversation_id, created_at])
  @@map("assistant_messages")
}


model AssistantTelemetry {
  id_assistant_telemetry Int                   @id @default(autoincrement())
  conversation_id        Int
  message_id             Int?
  user_id                Int
  event_type             String               @db.VarChar(50)
  label                  String?              @db.VarChar(255)
  data                   Json?
  created_at             DateTime             @default(now())

  conversation           AssistantConversation @relation(fields: [conversation_id], references: [id_assistant_conversation])
  message                AssistantMessage?    @relation(fields: [message_id], references: [id_assistant_message])
  user                   User                 @relation(fields: [user_id], references: [id_user])

  @@index([conversation_id, created_at])
  @@map("assistant_telemetry")
}


model Company {
  id_company        Int      @id @default(autoincrement())
  name              String
  siret             String   @unique
  sector            String
  address           String
  latitude          Float
  longitude         Float
  phone             String
  email             String
  website           String?
  description       String?
  validation_status String
  creation_date     DateTime @default(now())
  last_update       DateTime @updatedAt
  owner_id          Int?
  owner             User?    @relation(fields: [owner_id], references: [id_user])
  companyTypes      CompanyType[]
  inputs            Input[]
  outputs           Output[]
  suggestionInteractions SuggestionInteraction[]
  contacts          CompanyContact[]
  conversations     CompanyConversation[]
  companyMessages   CompanyMessage[]
  @@map("companies")
}


model CompanyContact {
  id_company_contact Int      @id @default(autoincrement())
  user_id            Int
  company_id         Int
  status             String   @default("active") @db.VarChar(30)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  user       User    @relation(fields: [user_id], references: [id_user])
  company    Company @relation(fields: [company_id], references: [id_company])
  conversations CompanyConversation[]

  @@unique([user_id, company_id])
  @@map("company_contacts")
}

model CompanyConversation {
  id_company_conversation Int      @id @default(autoincrement())
  contact_id              Int
  user_id                 Int
  company_id              Int
  status                  String   @default("active") @db.VarChar(30)
  last_message_at         DateTime?
  last_message_preview    String?  @db.VarChar(255)
  unread_count            Int      @default(0)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  contact CompanyContact @relation(fields: [contact_id], references: [id_company_contact])
  user    User           @relation(fields: [user_id], references: [id_user])
  company Company        @relation(fields: [company_id], references: [id_company])
  messages CompanyMessage[]

  @@unique([user_id, company_id])
  @@map("company_conversations")
}

model CompanyMessage {
  id_company_message Int      @id @default(autoincrement())
  conversation_id    Int
  company_id         Int
  sender_id          Int
  recipient_id       Int?
  body               String   @db.Text
  attachments        Json?
  status             String   @default("sent") @db.VarChar(30)
  trace_id           String   @db.VarChar(64)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  conversation CompanyConversation @relation(fields: [conversation_id], references: [id_company_conversation])
  company      Company             @relation(fields: [company_id], references: [id_company])
  sender       User                @relation("CompanyMessageSender", fields: [sender_id], references: [id_user])
  recipient    User?               @relation("CompanyMessageRecipient", fields: [recipient_id], references: [id_user])

  @@index([conversation_id, created_at])
  @@map("company_messages")
}

model CompanyType {
  company_id Int
  type_id    Int
  company    Company @relation(fields: [company_id], references: [id_company])
  type       Type    @relation(fields: [type_id], references: [id_type])
  @@id([company_id, type_id])
  @@map("company_types")
}


model Family {
  id_family Int    @id @default(autoincrement())
  name      String
  inputs    Input[]
  outputs   Output[]
  @@map("families")
}


model Flow {
  input_id  Int
  output_id Int
  input     Input  @relation(fields: [input_id], references: [id_input])
  output    Output @relation(fields: [output_id], references: [id_output])
  @@id([input_id, output_id])
  @@map("flows")
}


model ImportAnalysis {
  id_import_analysis Int      @id @default(autoincrement())
  file_id            Int
  user_id            Int
  status             String   @default("PENDING") @db.VarChar(50)
  predictions        Json?
  partnerships       Json?
  optimizations      Json?
  financial_impact   Json?
  precision_score    Decimal? @db.Decimal(5, 2)
  processing_time_ms Int?
  rows_processed     Int?
  errors             Json?
  source_data        Json?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  file               ImportFile @relation(fields: [file_id], references: [id_import_file])
  user               User       @relation(fields: [user_id], references: [id_user])
  history            ImportHistory[]

  @@map("import_analyses")
}


model ImportFile {
  id_import_file  Int      @id @default(autoincrement())
  user_id         Int
  file_name       String   @db.VarChar(255)
  file_size       Int
  file_type       String   @db.VarChar(50)
  file_path       String   @db.Text
  status          String   @default("UPLOADED") @db.VarChar(50)
  metadata        Json?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user            User             @relation(fields: [user_id], references: [id_user])
  analyses        ImportAnalysis[]
  history         ImportHistory[]

  @@map("import_files")
}


model ImportHistory {
  id_import_history Int       @id @default(autoincrement())
  file_id           Int
  analysis_id       Int?
  user_id           Int
  name              String    @db.VarChar(255)
  description       String?   @db.Text
  status            String    @db.VarChar(50)
  synced_to_profile Boolean   @default(false)
  synced_at         DateTime?
  created_at        DateTime  @default(now())

  file              ImportFile      @relation(fields: [file_id], references: [id_import_file])
  analysis          ImportAnalysis? @relation(fields: [analysis_id], references: [id_import_analysis])
  user              User            @relation(fields: [user_id], references: [id_user])

  @@map("import_history")
}


model Input {
  id_input      Int      @id @default(autoincrement())
  resource_id   String?
  name          String
  category      String
  unit_measure  String
  description   String?
  status        String
  creation_date DateTime @default(now())
  last_update   DateTime @updatedAt
  company_id    Int
  company       Company  @relation(fields: [company_id], references: [id_company])
  family_id     Int?
  family        Family?  @relation(fields: [family_id], references: [id_family])
  flows         Flow[]
  @@map("inputs")
}


model Output {
  id_output     Int      @id @default(autoincrement())
  resource_id   String?
  name          String
  category      String
  is_been       Boolean
  unit_measure  String
  description   String?
  status        String
  creation_date DateTime @default(now())
  last_update   DateTime @updatedAt
  company_id    Int
  company       Company  @relation(fields: [company_id], references: [id_company])
  family_id     Int?
  family        Family?  @relation(fields: [family_id], references: [id_family])
  flows         Flow[]
  @@map("outputs")
}


model Role {
  id_role Int    @id @default(autoincrement())
  name    String
  users   User[]
  @@map("roles")
}


model Subscription {
  id_subscription       Int      @id @default(autoincrement())
  stripe_id             String   @unique
  stripe_customer_id    String?
  subscription_type     String
  plan_id               String?
  billing_cycle         String?
  start_date            DateTime
  end_date              DateTime?
  current_period_start  DateTime?
  current_period_end    DateTime?
  cancel_at_period_end  Boolean  @default(false)
  price                 Float
  currency              String   @default("eur")
  status                String
  ai_consumption        Int      @default(0)
  billing_threshold     Float
  payment_method        String?
  metadata              Json?
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id_user])
  @@map("subscriptions")
}


model SuggestionInteraction {
  id_suggestion        Int      @id @default(autoincrement())
  user_id              Int
  target_company_id    Int
  status               String   @default("new")
  last_score           Int?
  distance_km          Float?
  reasons              Json?
  metadata             Json?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  user                 User     @relation(fields: [user_id], references: [id_user])
  targetCompany        Company  @relation(fields: [target_company_id], references: [id_company])

  @@unique([user_id, target_company_id])
  @@map("suggestion_interactions")
}


model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id_user])
  userId     Int
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  @@map("refresh_tokens")
}

model Type {
  id_type   Int    @id @default(autoincrement())
  name      String
  companyTypes CompanyType[]
  @@map("types")
}


model User {
  id_user         Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String    @unique
  password        String
  phone           String?
  avatar_url      String?   // ← AJOUTER UNIQUEMENT CETTE LIGNE
  stripe_customer_id String?
  confirmEmail    Boolean   @default(false)
  roleId          Int?
  roleObj         Role?   @relation(fields: [roleId], references: [id_role])
  creation_date   DateTime  @default(now())
  last_connection DateTime?
  companies       Company[]
  subscriptions   Subscription[]
  tokens          RefreshToken[]
  suggestionInteractions SuggestionInteraction[]
  importFiles     ImportFile[]
  importAnalyses  ImportAnalysis[]
  importHistory   ImportHistory[]
  assistantConversations AssistantConversation[]
  assistantMessages      AssistantMessage[]
  assistantEscalations   AssistantEscalation[]
  assistantTelemetry     AssistantTelemetry[]
  companyContacts        CompanyContact[]
  companyConversations   CompanyConversation[]
  sentCompanyMessages    CompanyMessage[]      @relation("CompanyMessageSender")
  receivedCompanyMessages CompanyMessage[]     @relation("CompanyMessageRecipient")
  @@map("users")
}
